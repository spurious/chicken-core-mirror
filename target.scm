;;; cgen.scm - C code-generator for the CHICKEN compiler
;
; Copyright (c) 2018-2020, The CHICKEN Team
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following
; conditions are met:
;
;   Redistributions of source code must retain the above copyright notice, this list of conditions and the following
;     disclaimer. 
;   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
;     disclaimer in the documentation and/or other materials provided with the distribution. 
;   Neither the name of the author nor the names of its contributors may be used to endorse or promote
;     products derived from this software without specific prior written permission. 
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
; OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
; AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
; CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
; OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.


(declare
  (unit target)
  (uses data-structures extras c-platform compiler internal support))

(module chicken.compiler.target
    (init-target finalize-target generate-target-code)

(import scheme
	chicken.base
	chicken.format
        chicken.fixnum
	chicken.internal
	chicken.platform
	chicken.string
        chicken.pretty-print
	chicken.compiler.core
	chicken.compiler.c-platform
	chicken.compiler.support)

(include "mini-srfi-1.scm")


(define (backslashify s)
  (string-translate* (->string s) '(("\\" . "\\\\"))))

(define (uncommentify s)
  (string-translate* (->string s) '(("*/" . "*_/"))))

(define output #f)
(define trampoline #f)

(define (emit . xs)
  (for-each 
    (lambda (x)
      (case x
        ((#t) (newline output))
        ((#f) #f)
        (else (display x output))))
    xs))

(define (emit-list xs proc)
  (let loop ((xs xs))
    (unless (null? xs)
      (proc (car xs))
      (unless (null? (cdr xs))
        (emit ",")
        (loop (cdr xs))))))

(define (header opts src)
  (emit "/* Generated from " src " by the CHICKEN compiler" #t
       "   http://www.call-cc.org" #t
       (string-intersperse
         (map (cut string-append "   " <> "\n")
            (string-split (chicken-version #t) "\n") )
	    "")
	   "   command line: ")
      (for-each (cut emit <> " ") opts)
      (unless (not unit-name)
	(emit #t "   unit: " unit-name))
      (unless (null? used-units)
	(emit #t "   uses: ")
	(emit-list used-units emit))
      (emit #t "*/")
      (emit #t "#include \"" target-include-file "\""))

(define (trailer)
  (emit #t "/* end of file */" #t))

(define (init-target out user-options source-file)
  (set! output out)
  (header user-options source-file))

(define (finalize-target)
  (trailer))

(define (generate-target-code form)
  (when (memq 'y debugging-chicken)
    (flush-output)
    (pp form))
  (top-expr form))

(define (top-expr x)
  (case (and (pair? x) (car x))
    ((call tailcall)
     (cond ((and (pair? (cadr x)) (eq? '$ (caadr x)))
            (emit #t (cadadr x)))
           (else
             (emit #t "(")
             (expr (cadr x))
             (emit ")")))
     (emit "(")
     (emit-list (cddr x) expr)
     (emit ");"))
    ((case)
     (emit #t "case ")
     (expr (cadr x))
     (emit ":"))
    ((continue)
     (emit #t "C_kontinue(")
     (expr (cadr x))
     (emit ",")
     (expr (caddr x))
     (emit ");"))
    ((comment)
     (emit #t "/* " (uncommentify (cadr x)) " */"))
    ((declare)
     (let ((class "")
           (noret ""))
       (let loop ((x (cdr x)))
         (case (car x)
           ((extern) 
            (set! class 'extern)
            (loop (cdr x)))
           ((static) 
            (set! class 'static)
            (loop (cdr x)))
           ((noreturn) 
            (set! noret "C_noret")
            (loop (cdr x)))
           (else
             (emit #t class " ")
             (type (car x))
             (emit " " (cadr x) "(")
             (emit-list (cddr x)
                        (lambda (arg)
                          (type (car arg))
                          (emit " " (cadr arg))))
             (emit ") " noret ";"))))))
    ((define)
     (let ((class "")
           (noreturn ""))
       (let loop ((x (cdr x)))
         (case (car x)
           ((extern) 
            (set! class 'extern)
            (loop (cdr x)))
           ((static)
            (set! class 'static)
            (loop (cdr x)))
           ((noreturn)
            (set! noreturn "C_noret")
            (loop (cdr x)))
           (else
             (emit #t #t class " ")
             (type (car x))
             (emit " " (cadr x) "(")
             (emit-list (cddr x)
                        (lambda (arg) 
                          (type (car arg))
                          (emit " " (cadr arg))))
             ;; tmp var for box/closure allocation
             (emit ") " noreturn "{" #t "C_word tmp;"))))))
    ((end) 
     (emit "}")
     (when trampoline
       (set! trampoline #f)
       (emit #t "#undef return")))
    ((define/array)
     (let ((class "")
           (aligned ""))
       (let loop ((x (cdr x)))
         (case (car x)
           ((static)
            (set! class 'static)
            (loop (cdr x)))
           ((aligned)
            (set! aligned "C_aligned")
            (loop (cdr x)))
           (else
             (emit #t class " ")
             (type (car x))
             (emit " " (cadr x) "[")
             (unless (null? (caddr x)) (emit (caddr x)))
             (emit "] " aligned)
             (unless (null? (cdddr x))
               (emit " ={")
               (let loop ((x (cdddr x)))
                 (unless (null? x)
                   (let ((val (car x)))
                     (cond ((vector? val)
                            (emit #t "{")
                            (emit-list (vector->list val) expr)
                            (emit "},"))
                           ((and (pair? val) (eq? 'C_lihdr (car val)))
                            (let ((b1 (cadr val))
                                  (b2 (caddr val))
                                  (b3 (cadddr val)))
                              (emit "C_lihdr(" b1 "," b2 "," b3 "),")))
                           (else (emit val ",")))
                     (loop (cdr x)))))
               (emit "}"))
             (emit ";"))))))
    ((define/variable)
     (let ((class ""))
       (when (memq (cadr x) '(static extern))
         (set! class (cadr x))
         (set! x (cdr x)))
       (emit #t class " ")
       (type (cadr x))
       (emit " " (caddr x))
       (unless (null? (cdddr x))
         (emit "=" (cadddr x)))
       (emit ";")))
    ((goto)
     (emit #t "goto " (cadr x) ";"))
    ((if)
     (emit #t "if(")
     (expr (cadr x))
     (emit ") {"))
    ((else)
     (emit "}" #t "else {"))
    ((endif)
     (emit "}"))
    ((inline)
     (emit #t (cadr x)))
    ((label)
     (emit #t (cadr x) ":;"))
    ((let)
     (emit #t "C_word " (cadr x))
     (unless (null? (cddr x))
       (emit "=")
       (expr (caddr x)))
     (emit ";"))
    ((let/proc)
     (emit #t "C_proc " (cadr x) "=")
     (expr (caddr x))
     (emit ";"))
    ((let/ptr let/cell)
     (emit #t "C_word* " (cadr x))
     (unless (null? (cddr x))
       (emit "=")
       (expr (caddr x)))
     (emit ";"))
    ((let/array)
     (emit #t "C_word " (cadr x) "[")
     (expr (caddr x))
     (emit "];"))
    ((let/unboxed)
     (emit #t)
     (type (cadr x))
     (emit " " (caddr x))
     (unless (null? (cdddr x))
       (emit "=")
       (expr (cadddr x)))
     (emit ";"))
    ((stack_overflow_check)
     (emit #t "C_stack_overflow_check;"))
    ((main_entry_point)
     (emit #t "C_main_entry_point "))
    ((save)
     (emit #t "C_save(")
     (expr (cadr x))
     (emit ");"))
    ((return)
     (emit #t "return ")
     (expr (cadr x))
     (emit ";"))
    ((set)
     (emit #t)
     (expr (cadr x))
     (emit "=")
     (expr (caddr x))
     (emit ";"))
    ((switch)
     (emit #t "switch(")
     (expr (cadr x))
     (emit "){"))
    ((default)
     (emit #t "default:;"))
    ((endswitch)
     (emit "}"))
    ((trampoline)
     (set! trampoline #t)
     (emit #t "#define return(x) C_cblock " (cadr x) "=(x); goto "
           (caddr x) "; C_cblockend"))
    (else (bomb "target - bad top-expr" x))))

(define (expr-list xs)
  (let loop ((xs xs))
    (unless (null? xs)
      (expr (car xs))
      (unless (null? (cdr xs))
        (emit ",")
        (loop (cdr xs))))))

(define (expr x)
  (cond ((and (number? x) (inexact? x))
         (emit "(double)"
               (cond ((nan? n) "NAN")
                     ((infinite? n)
                      (if (negative? n)
                          "-INFINITY"
                          "INFINITY"))
                     (else n))))
        ((atom? x) (emit x))
        (else
          (case (car x)
            (($) (emit (cadr x)))
            ((ref) (expr (cadr x)))
            ((begin)
             (emit "(")
             (expr (cadr x))
             (for-each 
               (lambda (y)
                 (emit ",")
                 (expr y))
               (cddr x))
             (emit ")"))
            ((adr) 
             (emit "&")
             (expr (cadr x)))
            ((box) 
             (let ((aexp (cadr x)))
               (emit "(*")
               (expr aexp)
               (emit "=C_VECTOR_TYPE|1,")
               (expr aexp)
               (emit "[1]=")
               (expr (caddr x))
               (emit ",tmp=(C_word)")
               (expr aexp)
               (emit ",")
               (expr aexp)
               (emit "+=2,tmp)")))
            ((cast)
             (emit "(")
             (type (cadr x))
             (emit ")")
             (expr (caddr x)))
            ((call)
             (cond ((and (pair? (cadr x)) (eq? '$ (caadr x)))
                    (emit (cadadr x)))
                   (else
                     (emit "(")
                     (expr (cadr x))
                     (emit ")")))
             (emit "(")
             (emit-list (cddr x) expr)
             (emit ")"))
            ((string)
             (emit-string-literal (cadr x)))
            ((closure)
             (let ((size (cadr x))
                   (aexp (caddr x)))
               (emit "(*")
               (expr aexp)
               (emit "=C_CLOSURE_TYPE|" size ",")
               (for-each
                 (lambda (arg i)
                   (expr aexp)
                   (emit "[" i "]=")
                   (expr arg)
                   (emit ","))
                 (cdddr x) 
                 (list-tabulate size add1))
               (emit "tmp=(C_word)")
               (expr aexp)
               (emit ",")
               (expr aexp)
               (emit "+=" (add1 size) ",tmp)")))
            ((cond)
             (emit "(")
             (expr (cadr x))
             (emit "?")
             (expr (caddr x))
             (emit ":")
             (expr (cadddr x))
             (emit ")"))
            ((deref)
             (emit "*")
             (expr (cadr x)))
            ((elt)
             (expr (cadr x))
             (emit "[")
             (expr (caddr x))
             (emit "]"))
            ((inline)
             (emit (cadr x)))
            ((mutate)
             (emit "C_mutate((C_word *)(")
             (expr (cadr x))
             (emit ")+")
             (expr (caddr x))
             (emit ",")
             (expr (cadddr x))
             (emit ")"))
            ((slot)
             (emit "*((C_word *)")
             (expr (cadr x))
             (emit "+1+")
             (expr (caddr x))
             (emit ")"))
            ((unlikely)
             (emit "C_unlikely(")
             (expr (cadr x))
             (emit ")"))
            ((words)
             (emit "(")
             (expr (cadr x))
             (emit "*sizeof(C_word))"))
            ((set)
             (expr (cadr x))
             (emit "=")
             (expr (caddr x)))
            ((~ !)
             (emit "(" (car x))
             (expr (cadr x))
             (emit ")"))
            ((+ - * / > < >= <= == != & ^ |\||)
             (emit "(")
             (cond ((null? (cddr x))
                    (emit (car x))
                    (expr (cadr x)))
                   (else
                     (expr (cadr x))
                     (emit (car x))
                     (expr (caddr x))))
             (emit ")"))
            ((restore) (emit "C_restore"))
            ((switch tailcall case declare declare/array define
                     end define/array define/vaiable goto if else 
                     endif label let let/var let/proc let/ptr
                     let/cell
                     let/array let/unboxed main_entry_point return
                     stack_overflow_check default endswitch)
             (bomb "target - top form in expr" x))
            (else
              (emit (car x) "(")
              (expr-list (cdr x))
              (emit ")"))))))

(define (type x)
  (case x
    ((...) (emit "..."))  ; for vararg function type
    ((void short long int size_t ssize_t float double
           C_PTABLE_ENTRY C_DEBUG_INFO) 
     (emit x))
    ((char) (emit "C_char"))
    ((uchar) (emit "C_uchar"))
    ((ushort) (emit "unsigned short"))
    ((ulong) (emit "unsigned long"))
    ((uint) (emit "unsigned int"))
    ((u32) (emit "C_u32"))
    ((s32) (emit "C_s32"))
    ((u64) (emit "C_u64"))
    ((s64) (emit "C_s64"))
    ((ptr) (emit "void *"))
    ((word) (emit "C_word"))
    ((proc) (emit "C_proc"))
    (else
      (case (and (pair? x) (car x))
        ((ptr) 
         (type (cadr x))
         (emit "*"))
        ((ref) 
         (type (cadr x))
         (emit "&"))
        ((template-instance)
         (type (cadr x))
         (emit "<")
         (emit-list (cddr x) type)
         (emit "<"))
        ((struct union enum)
         (emit (car x) " " (cadr x)))
        ((const)
         (emit "const ")
         (type (cadr x)))
        ((function)
         (type (cadr x))
         (when (caddr x) (emit (caddr x)))
         (emit "(*)(")
         (emit-list (cdddr x) type)
         (emit ")"))
        (else (bomb "bad type" x))))))

(define (emit-string-literal str)
  (define (gen-string-constant str)
    (let* ((len (##sys#size str))
           (ns (fx/ len 80))
	   (srest (modulo len 80)) )
	(do ((i ns (sub1 i))
	     (offset 0 (+ offset 80)) )
	    ((zero? i)
	     (when (or (zero? len) (not (zero? srest)))
	       (emit (c-ify-string (string-like-substring str offset len))) ) )
	  (emit (c-ify-string (string-like-substring str 
                                              offset
                                              (+ offset 80)))
                #t) ) ) )
  (define (string-like-substring s start end)
    (let* ((len (- end start))
           (s2 (make-string len)))
      (##sys#copy-bytes s s2 start 0 len)
      s2) )
  (emit "C_text(")
  (gen-string-constant str)
  (emit ")"))

)
